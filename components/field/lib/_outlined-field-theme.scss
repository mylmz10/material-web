//
// Copyright 2021 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

@use 'sass:map';
@use 'sass:string';
@use '@material/theme/state';
@use '../../sass/resolvers';
@use '../../sass/theme';
@use '../../sass/tokens';
@use '../../sass/var';
@use './content-theme';
@use './field-theme';
@use './label-theme';

$_default-deps: (
  md-sys-color: tokens.md-sys-color-values-light(),
  md-sys-shape: tokens.md-sys-shape-values(),
  md-sys-state: tokens.md-sys-state-values(),
  md-sys-typescale: tokens.md-sys-typescale-values(),
);

@function values($deps: $_default-deps, $exclude-hardcoded-values: false) {
  $text-field-values: tokens.md-comp-outlined-text-field-values(
    $deps,
    $exclude-hardcoded-values
  );
  // TODO(b/203778922): Remove *-type when type composite tokens are removed
  // Remove unused tokens.
  $values: map.remove(
    $text-field-values,
    caret-color,
    disabled-input-text-color,
    disabled-input-text-opacity,
    error-focus-caret-color,
    error-focus-input-text-color,
    error-hover-input-text-color,
    error-input-text-color,
    focus-input-text-color,
    hover-input-text-color,
    input-text-color,
    input-text-font,
    input-text-line-height,
    input-text-size,
    input-text-tracking,
    input-text-type,
    input-text-weight,
    label-text-type,
    supporting-text-type
  );

  // Add missing tokens.
  $values: map.merge(
    $values,
    (
      container-padding-horizontal: if($exclude-hardcoded-values, null, 16px),
      container-padding-vertical: if($exclude-hardcoded-values, null, 8px),
      content-color: map.get($text-field-values, input-text-color),
      disabled-content-color:
        map.get($text-field-values, disabled-input-text-color),
      disabled-content-opacity:
        map.get($text-field-values, disabled-input-text-opacity),
      error-content-color: map.get($text-field-values, error-input-text-color),
      error-focus-content-color:
        map.get($text-field-values, error-focus-input-text-color),
      error-hover-content-color:
        map.get($text-field-values, error-hover-input-text-color),
      focus-content-color: map.get($text-field-values, focus-input-text-color),
      hover-content-color: map.get($text-field-values, hover-input-text-color),
      outline-label-padding: if($exclude-hardcoded-values, null, 4px),
    )
  );

  @return $values;
}

$_reference-theme: values();

@function _resolve-theme($theme, $resolvers) {
  @return label-theme.resolve-theme($theme, $resolvers);
}

@mixin theme($theme, $resolvers: resolvers.$material) {
  // Add resolved tokens so that $theme may specify them.
  $reference: map.merge(
    $_reference-theme,
    _resolve-theme($_reference-theme, $resolvers)
  );
  $theme: theme.validate-theme($_reference-theme, $theme);
  $theme: _resolve-theme($theme, $resolvers);
  $theme: theme.create-theme-vars($theme, outlined-field);

  @include theme.emit-theme-vars($theme);
}

$_selectors: field-theme.$selectors;

@mixin theme-styles($theme, $resolvers: resolvers.$material) {
  $theme: theme.validate-theme-styles($_reference-theme, $theme);
  $theme: _resolve-theme($theme, $resolvers);
  $theme: theme.create-theme-vars($theme, outlined-field);

  @include field-theme.theme-styles($theme);
  @include content-theme.theme-styles($theme);
  @include label-theme.theme-styles($theme);

  @include _container-padding-horizontal(
    map.get($theme, container-padding-horizontal)
  );
  @include _container-shape(map.get($theme, container-shape));
  @include _outline-color(
    (
      default: map.get($theme, outline-color),
      disabled: map.get($theme, disabled-outline-color),
      focus: map.get($theme, focus-outline-color),
      hover: map.get($theme, hover-outline-color),
    )
  );
  @include _outline-error-color(
    (
      default: map.get($theme, error-outline-color),
      focus: map.get($theme, error-focus-outline-color),
      hover: map.get($theme, error-hover-outline-color),
    )
  );
  @include _outline-label-padding(map.get($theme, outline-label-padding));
  @include _outline-opacity(
    (
      disabled: map.get($theme, disabled-outline-opacity),
    )
  );
  @include _outline-notch-max-width(
    map.get($theme, container-padding-horizontal)
  );
  @include _outline-width(
    (
      default: map.get($theme, outline-width),
      disabled: map.get($theme, disabled-outline-width),
      focus: map.get($theme, focus-outline-width),
      hover: map.get($theme, hover-outline-width),
    )
  );
}

@mixin _container-padding-horizontal($padding) {
  .md3-field__outline-start,
  .md3-field__start::before,
  .md3-field__end::after {
    // Outlined variant start section uses min-width instead of padding since it
    // needs to add start/end padding to add extra space as needed for shape and
    // label padding.
    min-width: $padding;
  }
}

@mixin _container-shape($shape) {
  .md3-field__outline {
    border-radius: $shape;
  }

  .md3-field__outline-start,
  .md3-field__start::before,
  .md3-field__end::after {
    padding-inline-start: $shape;
  }
}

@mixin _outline-label-padding($padding) {
  .md3-field__outline-start,
  .md3-field__start::before {
    padding-inline-end: $padding;
  }

  .md3-field__outline-start::before,
  .md3-field__outline-start::after {
    margin-inline-end: $padding;
  }

  .md3-field__outline-notch {
    padding: 0 $padding;
    margin-inline-start: calc(-1 * #{$padding});
    margin-inline-end: $padding;
  }

  .md3-field__outline-end {
    margin-inline-start: calc(-1 * #{$padding});
  }
}

@mixin _outline-notch-max-width($container-padding-horizontal) {
  .md3-field__outline-notch {
    max-width: calc(100% - 2 * #{$container-padding-horizontal});
  }
}

@mixin _outline-color($colors) {
  @include state.enabled($_selectors) {
    @include _set-outline-color(state.get-default-state($colors));
  }

  @include state.focus($_selectors) {
    @include _set-outline-color(state.get-focus-state($colors));
  }

  @include state.hover($_selectors) {
    @include _set-outline-color(state.get-hover-state($colors));
  }

  @include state.disabled($_selectors) {
    @include _set-outline-color(state.get-disabled-state($colors));
  }
}

@mixin _set-outline-color($color) {
  .md3-field__outline {
    border-color: $color;
  }
}

@mixin _outline-error-color($colors) {
  @include state.error($_selectors) {
    @include _outline-color($colors);
  }
}

@mixin _outline-opacity($opacities) {
  @include state.enabled($_selectors) {
    @include _set-outline-inactive-opacity(state.get-default-state($opacities));
  }

  @include state.disabled($_selectors) {
    @include _set-outline-inactive-opacity(
      state.get-disabled-state($opacities)
    );
  }
}

@mixin _set-outline-inactive-opacity($opacity) {
  .md3-field__outline-start,
  .md3-field__outline-end,
  .md3-field__outline-panel-inactive {
    opacity: $opacity;
  }
}

@mixin _outline-width($widths) {
  @include state.enabled($_selectors) {
    @include _set-outline-width(state.get-default-state($widths));
  }

  @include state.disabled($_selectors) {
    @include _set-outline-width(state.get-disabled-state($widths));
  }

  @include state.hover($_selectors) {
    @include _set-outline-width(state.get-hover-state($widths));
  }

  @include _set-outline-focus-width(state.get-focus-state($widths));
}

@mixin _set-outline-width($width) {
  .md3-field__outline-start::before,
  .md3-field__outline-end::before,
  .md3-field__outline-panel-inactive,
  .md3-field__outline-panel-inactive::before,
  .md3-field__outline-panel-inactive::after {
    border-width: $width;
  }

  .md3-field__label--floating {
    // Center the label within the outline stroke
    transform: translateY(calc(-50% + #{$width} / 2));
  }
}

@mixin _set-outline-focus-width($width) {
  .md3-field__outline-start::after,
  .md3-field__outline-end::after,
  .md3-field__outline-panel-active,
  .md3-field__outline-panel-active::before,
  .md3-field__outline-panel-active::after {
    border-width: $width;
  }
}
